{"ast":null,"code":"var _jsxFileName = \"/Users/infinite/Documents/ZTM/Complete Web Developer/FullStack_Apps/f_stack/facerecognition/src/App.js\";\nimport React, { Component } from 'react'; // import Particles from 'react-particles-js';\n\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport SignIn from './components/SignIn/SignIn';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport './App.css'; // My clarifai's API key\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: '0e3bef19a40045b5ad2cf8074b70b620'\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          password: data.password,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      console.log(width, height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      console.log(box);\n      this.setState({\n        box\n      });\n    };\n\n    this.handleInputChange = e => {\n      this.setState({\n        input: e.target.value\n      });\n    };\n\n    this.handleImageSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => this.displayFaceBox(this.calculateFaceLocation(response))).catch(err => console.log(err));\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState({\n          isSignedIn: false\n        });\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        entries: 0,\n        joined: ''\n      }\n    };\n  }\n\n  render() {\n    const {\n      imageUrl,\n      route,\n      box,\n      isSignedIn\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        color: \"#00ffff\",\n        className: \"particlesbg\",\n        type: \"cobweb\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        onRouteChange: this.onRouteChange,\n        isSignedIn: isSignedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          user: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          handleInputChange: this.handleInputChange,\n          handleImageSubmit: this.handleImageSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          imageUrl: imageUrl,\n          box: box\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : route === 'signin' ? /*#__PURE__*/_jsxDEV(SignIn, {\n        onRouteChange: this.onRouteChange,\n        loadUser: this.loadUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        onRouteChange: this.onRouteChange,\n        loadUser: this.loadUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/infinite/Documents/ZTM/Complete Web Developer/FullStack_Apps/f_stack/facerecognition/src/App.js"],"names":["React","Component","ParticlesBg","Clarifai","Navigation","SignIn","Register","Logo","ImageLinkForm","Rank","FaceRecognition","app","App","apiKey","constructor","loadUser","data","setState","user","id","name","email","password","entries","joined","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","console","log","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","handleInputChange","e","input","target","value","handleImageSubmit","imageUrl","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","onRouteChange","route","isSignedIn","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Particles from 'react-particles-js';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\n\nimport Navigation from './components/Navigation/Navigation';\nimport SignIn from './components/SignIn/SignIn';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\n\nimport './App.css';\n\n// My clarifai's API key\nconst app = new Clarifai.App({\n  apiKey: '0e3bef19a40045b5ad2cf8074b70b620'\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        entries: 0,\n        joined: ''\n      }\n    }\n  }\n\n  loadUser = (data) => {\n    this.setState({ user: {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      password: data.password,\n      entries: data.entries,\n      joined: data.joined\n    }\n    })\n  }\n\n\n  // function to get the face location & draw the box around face\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    console.log(width, height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height),\n    }\n  }\n\n  displayFaceBox = (box) => {\n    console.log(box);\n    this.setState({box})\n  }\n\n  // function to keep track of changes in the input\n  handleInputChange = (e) => {\n    this.setState({input: e.target.value});\n  }\n\n  // this fxn will handle submitting the input for image detection\n  handleImageSubmit = () => {\n    this.setState({imageUrl: this.state.input});\n    app.models.predict(Clarifai.FACE_DETECT_MODEL, \n      this.state.input)\n      .then( response => this.displayFaceBox ( this.calculateFaceLocation(response) ) )\n      .catch(err => console.log(err))\n  }\n\n  onRouteChange = (route) => {\n    if (route === 'signout') {\n      this.setState({ isSignedIn: false })\n    } else if (route === 'home') {\n      this.setState({ isSignedIn: true })\n    }\n    this.setState({route: route});\n  }\n  \n  render() {\n    const { imageUrl, route, box, isSignedIn } = this.state;\n    return (\n      <div className=\"App\">\n        {/* <Particles className='particles' /> */}\n        <ParticlesBg color='#00ffff' className='particlesbg' type='cobweb' bg={true} />\n        <Navigation onRouteChange={this.onRouteChange} isSignedIn={isSignedIn} />\n        { route === 'home' ? \n          <>\n            <Logo />\n            <Rank user />\n            <ImageLinkForm \n              handleInputChange={this.handleInputChange} \n              handleImageSubmit={this.handleImageSubmit} \n            />\n            <FaceRecognition imageUrl={imageUrl} box={box} />\n          </>\n          :\n          (\n            route === 'signin' ? \n              <SignIn onRouteChange={this.onRouteChange} loadUser={this.loadUser} /> \n              :\n              <Register onRouteChange={this.onRouteChange} loadUser={this.loadUser} />\n          )\n        }\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}