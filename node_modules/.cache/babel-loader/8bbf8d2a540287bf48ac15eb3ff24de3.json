{"ast":null,"code":"var _jsxFileName = \"/Users/infinite/Documents/ZTM/Complete Web Developer/FullStack_Apps/f_stack/facerecognition/src/App.js\";\nimport React, { Component } from 'react'; // import Particles from 'react-particles-js';\n\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport SignIn from './components/SignIn/SignIn';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport './App.css'; // My clarifai's API key\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: '0e3bef19a40045b5ad2cf8074b70b620'\n});\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  box: {},\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: ''\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n\n    this.handleInputChange = e => {\n      this.setState({\n        input: e.target.value\n      });\n    };\n\n    this.handleImageSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => {\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          });\n        }\n\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState({\n          isSignedIn: false\n        });\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.state = initialState;\n  }\n\n  render() {\n    const {\n      imageUrl,\n      route,\n      box,\n      isSignedIn\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        color: \"#00ffff\",\n        className: \"particlesbg\",\n        type: \"cobweb\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        onRouteChange: this.onRouteChange,\n        isSignedIn: isSignedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          name: this.state.user.name,\n          entries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          handleInputChange: this.handleInputChange,\n          handleImageSubmit: this.handleImageSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          imageUrl: imageUrl,\n          box: box\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : route === 'signin' ? /*#__PURE__*/_jsxDEV(SignIn, {\n        onRouteChange: this.onRouteChange,\n        loadUser: this.loadUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        onRouteChange: this.onRouteChange,\n        loadUser: this.loadUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/infinite/Documents/ZTM/Complete Web Developer/FullStack_Apps/f_stack/facerecognition/src/App.js"],"names":["React","Component","ParticlesBg","Clarifai","Navigation","SignIn","Register","Logo","ImageLinkForm","Rank","FaceRecognition","app","App","apiKey","initialState","input","imageUrl","box","route","isSignedIn","user","id","name","email","entries","joined","constructor","loadUser","data","setState","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","handleInputChange","e","target","value","handleImageSubmit","state","models","predict","FACE_DETECT_MODEL","then","response","fetch","method","headers","body","JSON","stringify","json","count","Object","assign","catch","err","console","log","onRouteChange","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import Particles from 'react-particles-js';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport SignIn from './components/SignIn/SignIn';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\n\nimport './App.css';\n\n// My clarifai's API key\nconst app = new Clarifai.App({\n  apiKey: '0e3bef19a40045b5ad2cf8074b70b620'\n});\n\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  box: {},\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: ''\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n  \n  loadUser = (data) => {\n    this.setState({ user: {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    }\n    })\n  }\n\n  // function to get the face location & draw the box around face\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height),\n    }\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({box: box});\n  }\n\n  // function to keep track of changes in the input\n  handleInputChange = (e) => {\n    this.setState({input: e.target.value});\n  }\n\n  // this fxn will handle submitting the input for image detection\n  handleImageSubmit = () => {\n    this.setState({imageUrl: this.state.input});\n    app.models.predict(Clarifai.FACE_DETECT_MODEL, \n      this.state.input)\n      .then( response => {\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          })\n          .then( response => response.json() )\n          .then( count => {\n            this.setState( Object.assign(this.state.user, { entries: count }) )\n          })\n        }\n        this.displayFaceBox ( this.calculateFaceLocation(response) )\n      })\n      .catch(err => console.log(err));\n  }\n\n  onRouteChange = (route) => {\n    if (route === 'signout') {\n      this.setState({ isSignedIn: false })\n    } else if (route === 'home') {\n      this.setState({ isSignedIn: true })\n    }\n    this.setState({route: route});\n  }\n  \n  render() {\n    const { imageUrl, route, box, isSignedIn } = this.state;\n    return (\n      <div className=\"App\">\n        {/* <Particles className='particles' /> */}\n        <ParticlesBg color='#00ffff' className='particlesbg' type='cobweb' bg={true} />\n        <Navigation onRouteChange={this.onRouteChange} isSignedIn={isSignedIn} />\n        { route === 'home' ? \n          <>\n            <Logo />\n            <Rank name={this.state.user.name} entries={this.state.user.entries} />\n            <ImageLinkForm \n              handleInputChange={this.handleInputChange} \n              handleImageSubmit={this.handleImageSubmit} \n            />\n            <FaceRecognition imageUrl={imageUrl} box={box} />\n          </>\n          :\n          (\n            route === 'signin' ? \n              <SignIn onRouteChange={this.onRouteChange} loadUser={this.loadUser} /> \n              :\n              <Register onRouteChange={this.onRouteChange} loadUser={this.loadUser} />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}